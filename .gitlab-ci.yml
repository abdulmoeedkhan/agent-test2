variables:
  #IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${CI_COMMIT_SHA}
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
stages:
  #- validate
  #- compile
  - node-modules
  - test
  - code_format
  - node-scan
  - artifacts
  - init
  - build
  - docker_build_merge
  - docker_build_branch
  - scan_api
  - publish_merge
  - publish_branch
##+==================Runs on Every Commit and merge requests========================+
# node-validate:
#   stage: validate
#   #when: manual
#   image: 
#   script:
#   only:
#     - /^CIM-.*$/
#     - merge_requests
#   allow_failure: false
#+==================Runs on Every Commit and merge requests========================+

# node-compile:
#   stage: compile
#   when: on_success
#   image: 
#   script:
#   only:
#     - /^CIM-.*$/
#     - merge_requests
#   allow_failure: false
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}
#     paths:
#       - node_modules

#+==================Runs on Every Commit and merge requests========================+
node-modules-generate:
  stage: node-modules
  image: gitlab.expertflow.com:9242/general/node:CSN-3623
  script:
    - npm install
  only:
     refs:
       - /^CIM-.*$/
       - merge_requests
     changes:
       - package.json
  allow_failure: false
  cache:
    key: unified-agent-cache
    paths:
      - node_modules
#  artifacts:
#    paths:
#        - coverage
#        - node_modules/

#+==================Runs on Every Commit and merge requests========================+
#+==================Runs on Every Commit and merge requests========================+
node-test:
  stage: test
  image: gitlab.expertflow.com:9242/general/node:CSN-3623
  script:
    #- npm install
    - npm run coverage
  only:
    - /^CIM-.*$/
    - merge_requests
  allow_failure: false
  cache:
    key: unified-agent-cache
    paths:
      - node_modules
      - coverage
#  artifacts:
#    paths:
#        - coverage
#        - node_modules/

#+==================Runs on Every Commit and merge requests========================+

node-format:
   stage: code_format
   when: on_success
   image: node:latest
   script:
     - npm run format:check
   allow_failure: false
#   artifacts:
#       expire_in: 999 yrs
#       paths:
#           - node_modules
   only:
     - /^CIM-.*$/
     - merge_requests
   cache:
       key: unified-agent-cache
       paths:
           - node_modules
       policy: pull




#==================Runs on merge requests only========================+
#===============Code Quality /Static Testing==========
#sonarqube-pretest:
#   stage: node-scan
#   when: on_success
#   dependencies:
#       - node-test
#   #tags: [old-runner]
#   image: sonarsource/sonar-scanner-cli:latest
#   variables:
#       SONAR_TOKEN: "a447ea2777487119191464c9f5e9566637ace688"
#       SONAR_HOST_URL: "http://192.168.1.109:9000"
#       SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
#       GIT_DEPTH: 1
#   script:
#       - sonar-scanner -Dsonar.qualitygate.wait=true
#   cache:
#       key: ${CI_COMMIT_REF_SLUG}
#       paths:
#       - .sonar/cache
#   allow_failure: false
#   only:
#       - /^CIM-.*$/
#       - merge_requests
#=================New Code Quality for NodeJS and TS============
sonarqube-test:
  stage: node-scan
  image: adoptopenjdk/openjdk11:alpine-jre
  script:
    - apk add --no-cache git python3 py-pip bash shellcheck 'nodejs>10' 'npm>10'
    - npm install -g typescript@3.7.5
    - pip install --no-cache-dir --upgrade pip
    - pip install --no-cache-dir pylint
    #- npm install
    #- npm run test
    #- npm run coverage
    - npm run sonar
  only:
    - /^CIM-.*$/
    - merge_requests
  allow_failure: false
  cache:
    key: unified-agent-cache
    paths:
      - node_modules
      - coverage
    policy: pull
  #=artifacts:
    #paths:
        #- coverage


node_artifacts:
   stage: artifacts
   when: on_success
   image: gitlab.expertflow.com:9242/general/node:CSN-3623
   script:
   #- npm install
   - npm run build
   - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
   - echo "${TIME_TOKEN}"
   #- rm -rf node_modules/.sonar
   #- mv target/bot-framework-*.jar target/bot-framework-"${TIME_TOKEN}".jar
   #- mv target/bot-framework-*.jar.original target/bot-framework-"${TIME_TOKEN}".jar.original

   artifacts:
       name: "$CI_PROJECT_TITLE-$TIME_TOKEN"
       paths:
           - dist
       expire_in: 999 yrs
   allow_failure: false
   cache:
       key: unified-agent-cache
       paths:
           - node_modules
           #- dist
       policy: pull
   only:
   - /^CIM-.*$/

#+==================Runs on merge requests only========================+

##================Auto_increment_Start================

auto_increment:
  image: docker:latest
  stage: init
  when: on_success
  variables:
    VAR_NAME: BUILD_NUMBER
    TIME_VAR: BUILD_TIME
    TOKEN: ${CI_PIPELINE_IID_TOKEN}
    GITLAB_URL: "https://gitlab.expertflow.com"
  before_script:
  - apk add --update curl jq
  script:
  - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
  - "VAR=$(curl -s -f  --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${VAR_NAME}\" | jq  -r '.value' ) "
  - let VAR=VAR+1
  - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${VAR_NAME}\" --form \"value=${VAR}\" "
  - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${TIME_VAR}\" --form \"value=${TIME_TOKEN}\" "
  - echo "${TIME_TOKEN} ${VAR} ${TIME_VAR}"
  only:
  - merge_requests

# ===================Auto_increment_END===================


#+==================Runs on merge requests only========================+
ng_build:
   stage: build
   when: on_success
   image: gitlab.expertflow.com:9242/general/node:CSN-3623
   script:
   - npm run build
   #- export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
   #- echo "${TIME_TOKEN} ${BUILD_NUMBER}"
   #- mv target/bot-framework-*.jar target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar
   #- mv target/bot-framework-*.jar.original target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar.original

   artifacts:
       name: "$CI_PROJECT_TITLE - ${BUILD_TIME}_build-${BUILD_NUMBER}"
       paths:
           - dist
       expire_in: 999 yrs
   allow_failure: false
   only:
   - merge_requests
   cache:
       key: unified-agent-cache
       paths:
           - node_modules
       policy: pull
           #- dist

#+==================Runs on merge requests only========================+
build:image:
 image: docker:latest
 stage: docker_build_merge
 when: manual
 services:
   - docker:dind
 before_script:
   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 dependencies:
   - ng_build
 script:
   - echo ${BUILD_TIME} ${BUILD_NUMBER}
   #- cp -r ./target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar ./docker/bot-framework.jar
   #- cp -r $(ls -A | grep -v -E "docker|coverage|.sonar") ./docker/
   - cp -r dist ./docker/
   - cd docker
   - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
   - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$IMAGE_NAME"
   - docker push "$IMAGE_NAME"
 only:
   - merge_requests
 allow_failure: false
 
 #+==================Runs on merge requests only========================+
build:image:
 image: docker:latest
 stage: docker_build_branch
 when: manual
 services:
   - docker:dind
 before_script:
   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 dependencies:
   - node_artifacts
 script:
   - echo ${BUILD_TIME} ${BUILD_NUMBER}
   #- cp -r ./target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar ./docker/bot-framework.jar
   #- cp -r $(ls -A | grep -v -E "docker|coverage|.sonar") ./docker/
   - cp -r dist ./docker/
   - cd docker
   - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
   - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$IMAGE_NAME"
   - docker push "$IMAGE_NAME"
 only:
   - /^CIM-.*$/  
 allow_failure: false

#+==================Runs on merge requests only========================+
anchore_scan_api:
  image: anchore/engine-cli:latest
  stage: scan_api
  when: on_success
  variables:
    ANCHORE_CLI_URL: "http://192.168.2.249:8228/v1"
    ANCHORE_CLI_USER: "admin"
    ANCHORE_CLI_PASS: "foobar"
    ANCHORE_CLI_SSL_VERIFY: "false"
    ANCHORE_TIMEOUT: 900
    ANCHORE_FAIL_ON_POLICY: "false"
  script:
    - echo "Adding image to Anchore engine at ${ANCHORE_CLI_URL}"
    - anchore-cli image add ${IMAGE_NAME}
    - echo "Waiting for analysis to complete"
    - anchore-cli image wait ${IMAGE_NAME} --timeout ${ANCHORE_TIMEOUT}
    - echo "Analysis complete"
    - echo "Producing reports"
    #- anchore-cli image content ${IMAGE_NAME} os > image-packages.txt
    #- anchore-cli image content ${IMAGE_NAME} npm > image-npm.txt
    #- anchore-cli image content ${IMAGE_NAME} gem > image-gem.txt
    #- anchore-cli image content ${IMAGE_NAME} python > image-python.txt
    #- anchore-cli image content ${IMAGE_NAME} java > image-java.txt
    - anchore-cli image vuln ${IMAGE_NAME} all
    - anchore-cli image vuln ${IMAGE_NAME} all > "${CI_PROJECT_TITLE}"-image-vulnerabilities.txt
    - anchore-cli image get ${IMAGE_NAME} > "${CI_PROJECT_TITLE}"-image-details.txt
    - anchore-cli evaluate check ${IMAGE_NAME} --detail > "${CI_PROJECT_TITLE}"-image-policy.txt || true
    - if [ "${ANCHORE_FAIL_ON_POLICY}" == "true" ] ; then anchore-cli evaluate check ${IMAGE_NAME}  ; fi 
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 999 yrs
    paths:
    - ${CI_PROJECT_TITLE}-image-policy.txt
    - ${CI_PROJECT_TITLE}-image-details.txt
    - ${CI_PROJECT_TITLE}-image-vulnerabilities.txt
    #- image-java.txt
    #- image-python.txt
    #- image-gem.txt
    #- image-npm.txt
    #- image-packages.txt
  only:
    - merge_requests
    - /^CIM-.*$/

#+==================Runs on merge requests only========================+
container_publish:
  stage: publish_merge
  image: docker:latest
  when: manual
  services:
    - docker:dind

  variables:
    #DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none

  script:
    - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
    - echo "${TIME_TOKEN} ${BUILD_NUMBER}"
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "${CI_REGISTRY}"
    - docker pull "$IMAGE_NAME"
    - docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-${BUILD_TIME}_build-${BUILD_NUMBER}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-${BUILD_TIME}_build-${BUILD_NUMBER}"
    #- |
    #    if [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "master" ]; then
    #      docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:latest"
    #      docker push "${CI_REGISTRY_IMAGE}:latest"
    #    fi
  only:
    - merge_requests

#+==================Runs on merge requests only========================+
container_publish:
  stage: publish_branch
  image: docker:latest
  when: manual
  services:
    - docker:dind

  variables:
    #DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none

  script:
    - export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
    - echo "${TIME_TOKEN}"
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "${CI_REGISTRY}"
    - docker pull "$IMAGE_NAME"
    - docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-${TIME_TOKEN}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-${TIME_TOKEN}"
    #- |
    #    if [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "master" ]; then
    #      docker tag "$IMAGE_NAME" "${CI_REGISTRY_IMAGE}:latest"
    #      docker push "${CI_REGISTRY_IMAGE}:latest"
    #    fi
  only:

    - /^CIM-.*$/

